import { NextRequest, NextResponse } from "next/server";
import { db } from "@/lib/db";
import { settings, aiDocuments } from "@/lib/schema";
import { eq } from "drizzle-orm";
import { v4 as uuidv4 } from "uuid";
import jwt from "jsonwebtoken";

interface DecodedToken {
  id: number;
  email: string;
  iat: number;
  exp: number;
}

export async function POST(req: NextRequest) {
  const authHeader = req.headers.get('authorization');
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return NextResponse.json({ error: 'Authorization header missing or invalid' }, { status: 401 });
  }

  const token = authHeader.split(' ')[1];

  if (!process.env.JWT_SECRET) {
    console.error('JWT_SECRET is not defined');
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }

  let decodedToken: DecodedToken;
  try {
    decodedToken = jwt.verify(token, process.env.JWT_SECRET) as DecodedToken;
  } catch (error) {
    return NextResponse.json({ error: 'Invalid token' }, { status: 401 });
  }

  const email = decodedToken.email;

  if (!email) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const body = await req.json();
  const { prompt } = body;

  if (!prompt || typeof prompt !== "string" || prompt.length < 3) {
    return NextResponse.json(
      { error: "Prompt is required and must be a string of at least 3 characters." },
      { status: 400 }
    );
  }

  try {
    const setting = await db
      .select()
      .from(settings)
      .where(eq(settings.param, "openai"))
      .limit(1);


   if (!setting) {
      return NextResponse.json(
        { error: "OpenAI settings not found. Please configure it first." },
        { status: 400 }
      );
    }

    // Parse JSON stored in 'value' column
    
    let openaiConfig;
    try {
      openaiConfig = JSON.parse(setting[0].value);
    } catch (error) {
      return NextResponse.json(
        { error: "Invalid OpenAI configuration JSON." },
        { status: 400 }
      );
    }

    console.log('config: ', openaiConfig)

      

    // Extract API key
    const openai_api_key = openaiConfig.apiKey;

    if (!openai_api_key) {
      return NextResponse.json(
        { error: "OpenAI API key is missing. Please configure it first." },
        { status: 400 }
      );
    }

    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${openai_api_key}`,
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content:
              "You are a helpful assistant that writes structured and formatted documents in HTML using <h1>, <h3>, <p>, <ul>, <strong>, etc.",
          },
          { role: "user", content: prompt },
        ],
        temperature: 0.7,
        max_tokens: 1024,
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      return NextResponse.json(
        { error: errorData.error?.message || "Failed to connect to OpenAI API." },
        { status: response.status }
      );
    }

    const data = await response.json();
    const content = data.choices[0]?.message?.content;

    if (!content) {
      return NextResponse.json(
        { error: "No content generated by AI." },
        { status: 500 }
      );
    }

    return NextResponse.json({ content: content });
  } catch (error) {
    console.error("Server error while contacting OpenAI:", error);
    return NextResponse.json(
      { error: "Server error while contacting OpenAI." },
      { status: 500 }
    );
  }
}
